openapi: 3.1.0
info:
  title: Insurance API
  description: API for managing insurance policies, user details, documents, financial data, and FAQs.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /policies:
    get:
      summary: Get all policies
      tags:
        - policies
      responses:
        "200":
          $ref: "#/components/responses/PolicyList"

  /policies/{policyId}:
    get:
      summary: Get a single policy
      tags:
        - policies
      parameters:
        - $ref: "#/components/parameters/PolicyId"
      responses:
        "200":
          $ref: "#/components/responses/PolicyDetails"

  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/UserList"

  /users/{userId}:
    get:
      summary: Get user personal information
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          $ref: "#/components/responses/UserDetails"

  /users/{userId}/documents:
    get:
      summary: Get all documents for a user
      tags:
        - documents
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          $ref: "#/components/responses/Documents"

  /users/{userId}/documents/{documentId}:
    get:
      summary: Get a single document for a user
      tags:
        - documents
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/DocumentId"
      responses:
        "200":
          $ref: "#/components/responses/DocumentDetails"

  /users/{userId}/invoices:
    get:
      summary: Get all invoices for a user
      tags:
        - invoices
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          $ref: "#/components/responses/FinancialDetails"

  /users/{userId}/invoices/{invoiceId}:
    get:
      summary: Get a single invoice for a user
      tags:
        - invoices
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/InvoiceId"
      responses:
        "200":
          $ref: "#/components/responses/InvoiceDetails"

  /faqs:
    get:
      summary: Get FAQs
      tags:
        - faqs
      parameters:
        - $ref: "#/components/parameters/FaqQuery"
      responses:
        "200":
          $ref: "#/components/responses/FaqList"

components:
  parameters:
    UserId:
      name: userId
      in: path
      required: true
      description: The unique identifier of the user.
      schema:
        type: string
    PolicyId:
      name: policyId
      in: path
      required: true
      description: The unique identifier of the policy.
      schema:
        type: string
    DocumentId:
      name: documentId
      in: path
      required: true
      description: The unique identifier of the document.
      schema:
        type: string
    InvoiceId:
      name: invoiceId
      in: path
      required: true
      description: The unique identifier of the invoice.
      schema:
        type: string
    FaqQuery:
      name: query
      in: query
      required: false
      description: Search query term for FAQs.
      schema:
        type: string

  responses:
    PolicyList:
      description: A list of all policies.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Policy"

    PolicyDetails:
      description: Details of a single policy.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Policy"

    UserList:
      description: A list of all users.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PersonalInfo"

    UserDetails:
      description: Details of a single user.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PersonalInfo"

    Documents:
      description: A list of documents associated with a user.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DocumentType"

    DocumentDetails:
      description: Details of a single document.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentType"

    FinancialDetails:
      description: A list of financial details (invoices) associated with a user.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FinancialDetails"

    InvoiceDetails:
      description: Details of a single invoice.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvoiceType"

    FaqList:
      description: A list of FAQs.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/FAQType"

  schemas:
    Policy:
      type: object
      properties:
        policyId:
          type: string
        licensePlate:
          type: string
        policyNumber:
          type: string
        documents:
          type: array
          items:
            $ref: "#/components/schemas/DocumentType"
        vehicleDetails:
          $ref: "#/components/schemas/VehicleDetails"
        insuranceDetails:
          $ref: "#/components/schemas/InsuranceDetails"

    VehicleDetails:
    type: object
    properties:
      brand:
        type: string
      licensePlate:
        type: string
      reportingCode:
        type: string
      type:
        type: string
      constructionYear:
        type: integer
      kmPerYear:
        type: integer
      speed:
        type: string

    InsuranceDetails:
      type: object
      properties:
        effectiveDate:
          type: string
          format: date
        mutationDate:
          type: string
          format: date
        term:
          type: string
          enum: ["maand", "jaar"]
        expiryDate:
          type: string
          format: date
        contractTerm:
          type: integer

    PersonalInfo:
      type: object
      properties:
        policyHolder:
          $ref: "#/components/schemas/Person"
        additionalDriver:
          $ref: "#/components/schemas/Person"

    Person:
      type: object
      properties:
        personalDetails:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            birthdate:
              type: string
              format: date
            phone:
              type: string
            email:
              type: string
        addressDetails:
          type: object
          properties:
            address:
              type: string
            houseNumber:
              type: integer
            postcode:
              type: string
            residence:
              type: string
        paymentDetails:
          type: object
          properties:
            account_number:
              type: string


    DocumentType:
      type: object
      properties:
        documentId:
          type: string
        docType:
          type: string
        downloadUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    FinancialDetails:
      type: object
      properties:
        paid:
          type: array
          items:
            $ref: "#/components/schemas/InvoiceType"
        upcoming:
          type: array
          items:
            $ref: "#/components/schemas/InvoiceType"

    InvoiceType:
      type: object
      properties:
        invoiceId:
          type: string
        amount:
          type: number
          format: float
        status:
          type: string
          enum: ['PAID', 'UPCOMING']
        datePaid:
          type: ['string', 'null']
          format: date-time
        dueDate:
          type: string
          format: date-time

    FAQType:
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
